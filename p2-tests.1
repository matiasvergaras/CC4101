#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 8.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 79
(1
 #"((lib \"srcloc-snip.rkt\" \"framework\") (lib \"wxme-srcloc-snip.rkt"
 #"\" \"framework\"))\x00"
) 1 0 93
(2
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(3
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(4
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 83 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 4
32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 60 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 190 190 190 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 107 142 35 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 100 149 237 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 65 105 225 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 70 130 180 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 47 79 79 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 139 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 75 0 130 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 160 32 240 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 128 114 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 184 134 11 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 128 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 228 225 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 0 0 224 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 224 255 255 -1 -1
          0 3160 0 28 3 10 #"#lang play"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"print-only-errors"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"tarea1.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"#| CC4101: Lenguajes de Programaci\303\263n"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"-- Tarea 1 Semestre Oto\303\261o 2021 (2021-1)"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"-- Alumno: Mat\303\255as Vergara Silva"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"-- Script: tests pregunta 1: Tipos est\303\241ticos"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"#| ======= TAREA 1: LENGUAJE CON FUNCIONES DE PRIMER ORDEN =======|#"
0 0 24 29 1 #"\n"
0 0 17 3 69
(5
 #"#| -------  Tipos est\xC3\xA1ticos, tipos opcionales, contratos   ---"
 #"----|#"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(6
 #"#| --------------  Test parte 1: Chequeo din\xC3\xA1mico   ----------"
 #"----|#"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"#|------------------   Tests del enunciado  -----------------|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"}}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 2 #"15"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"gt42"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 2 #" {"
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" {"
0 0 14 3 4 #"gt42"
0 0 24 3 1 #" "
0 0 21 3 2 #"43"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 2 #"id"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"}} "
0 0 14 3 1 #"x"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" {"
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"add2"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 4 #"oops"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"add2"
0 0 24 3 1 #" "
0 0 14 3 4 #"oops"
0 0 24 3 4 #"}}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Runtime"
0 0 19 3 12 #" type error\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 1 #"f"
0 0 24 3 2 #" {"
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 4 #"}} {"
0 0 14 3 2 #"&&"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          {"
0 0 14 3 1 #"f"
0 0 24 3 2 #" {"
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 5 #"}}}) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Any"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 3 #"one"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"1"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          {"
0 0 14 3 3 #"one"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 4 #"}}) "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Static"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 6 #"error:"
0 0 19 3 1 #" "
0 0 19 3 8 #"expected"
0 0 19 3 1 #" "
0 0 19 3 3 #"Num"
0 0 19 3 12 #" found Bool\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Static"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 6 #"error:"
0 0 19 3 1 #" "
0 0 19 3 8 #"expected"
0 0 19 3 1 #" "
0 0 19 3 3 #"Num"
0 0 19 3 12 #" found Bool\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 21 3 2 #"73"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Static"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 6 #"error:"
0 0 19 3 1 #" "
0 0 19 3 8 #"expected"
0 0 19 3 1 #" "
0 0 19 3 4 #"Bool"
0 0 19 3 11 #" found Num\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 1 #"z"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 7 #"\"Static"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 6 #"error:"
0 0 19 3 1 #" "
0 0 19 3 8 #"expected"
0 0 19 3 1 #" "
0 0 19 3 3 #"Num"
0 0 19 3 12 #" found Bool\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"#|------------------   Tests personalizados   -----------------|#"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";--"
0 0 17 3 1 #" "
0 0 17 3 8 #"usaremos"
0 0 17 3 1 #" "
0 0 17 3 3 #"los"
0 0 17 3 1 #" "
0 0 17 3 6 #"mismos"
0 0 17 3 1 #" "
0 0 17 3 5 #"tests"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 1 #" "
0 0 17 3 2 #"la"
0 0 17 3 1 #" "
0 0 17 3 2 #"P1"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 4 #"pero"
0 0 17 3 1 #" "
0 0 17 3 8 #"variando"
0 0 17 3 1 #" "
0 0 17 3 2 #"la"
0 0 17 3 12 #" declaracion"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";--"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 7 #" tipos."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";Programa con error de tipos en una funci\303\263n que no se usa."
0 0 24 29 1 #"\n"
0 0 17 3 20 #";Sin declarar tipos."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 6 #"triple"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"add2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"add2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 19 3 44 #"\"Static type error: expected Num found Bool\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";Programa con error de tipos en una funci\303\263n que no se usa."
0 0 24 29 1 #"\n"
0 0 17 3 70
(7
 #";Declarando tipo de la funci\xC3\xB3n (no deber\xC3\xADa dejar pasar "
 #"el problema)."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 6 #"triple"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"add2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"add2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 19 3 44 #"\"Static type error: expected Num found Bool\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";Programa con error de tipos en una funci\303\263n que se usa en if"
0 0 24 29 1 #"\n"
0 0 17 3 70
(8
 #";Declarando tipo de la funci\xC3\xB3n como Any (deber\xC3\xADa pasar "
 #"por comod\xC3\xADn)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"add2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";Programa con error de tipos en una funci\303\263n que se usa en if"
0 0 24 29 1 #"\n"
0 0 17 3 71
(9
 #";Declarando tipo de la funci\xC3\xB3n como Num (deber\xC3\xADa caerse"
 #" en typecheck)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"add2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 19 3 44 #"\"Static type error: expected Bool found Num\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";Programa con error de tipo en argumento declarado como Num"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 6 #"negate"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 6 #"negate"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 19 3 44 #"\"Static type error: expected Bool found Num\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(10
 #";Programa con error de tipo entre cuerpo de funci\xC3\xB3n y tipo dec"
 #"larado"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 6 #"negate"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 6 #"negate"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 19 3 44 #"\"Static type error: expected Bool found Num\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";Programa con error de tipos en un operador."
0 0 24 29 1 #"\n"
0 0 17 3 91
(11
 #";obs: (! x) pasa porque a x no se le declara tipo y racket acepta la "
 #"negaci\xC3\xB3n de n\xC3\xBAmeros."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 6 #"badsum"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 14 3 6 #"badsum"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 3 #" ) "
0 0 19 3 44 #"\"Static type error: expected Num found Bool\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(12
 #";Lo mismo, pero declarando x como Num. debe caerse por la obs. anteri"
 #"or."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 6 #"badsum"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 14 3 6 #"badsum"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 3 #" ) "
0 0 19 3 44 #"\"Static type error: expected Bool found Num\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(13
 #";Lo mismo, pero declarando x como Bool e introduci\xC3\xA9ndolo con w"
 #"ith como Num."
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(14
 #";Tambi\xC3\xA9n quitamos el error de (+ (! x) y) (bool como param de "
 #"+) porque"
) 0 0 24 29 1 #"\n"
0 0 17 3 52 #";se detecta antes y no deja testear lo que buscamos."
0 0 24 29 1 #"\n"
0 0 17 3 5 #";debe"
0 0 17 3 1 #" "
0 0 17 3 28 #"caerse por la obs. anterior."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 6 #"badsum"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"}{"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}} {"
0 0 14 3 6 #"badsum"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"}}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 3 #" ) "
0 0 19 3 44 #"\"Static type error: expected Bool found Num\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";Buen comportamiento con casos simples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 19 3 44 #"\"Static type error: expected Num found Bool\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";Buen comportamiento del typechecker con casos simples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}}) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";Buen comportamiento del typechecker con casos simples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";Buen comportamiento del typechecker con casos simples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 21 3 2 #"#f"
0 0 24 3 3 #"}) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"Bool"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";Buen comportamiento del typechecker con casos simples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 2 #"&&"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 4 #"}}) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"Bool"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";Buen comportamiento del typechecker con casos simples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 4 #"}}) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"Bool"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";Buen comportamiento del typechecker con casos simples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 4 #"}}) "
0 0 19 3 44 #"\"Static type error: expected Bool found Num\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";with en el cual se asigna x Any y se usa en &&."
0 0 24 29 1 #"\n"
0 0 17 3 61
#";Typechecker debe respetar tipo estricto del operador (Bool)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"&&"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 5 #"}}}) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"Bool"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 49 #"mismo ejemplo anterior pero con || en lugar de &&"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 5 #"}}}) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"Bool"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";with en el cual se reestablece el tipo y valor de x."
0 0 24 29 1 #"\n"
0 0 17 3 61
#";El tipo entregado debe concordar con el x de mas a la izqda."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 1 #"x"
0 0 24 3 4 #"}}) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";Mismo ejemplo anterior, pero preguntando por el tipo de un elemento"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";que no es el primero."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 1 #"z"
0 0 24 3 4 #"}}) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";with con expresiones recursivas"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";asignando todos los tipos de forma correcta"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";debe fallar ya que los casos del if son Bool y Num."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{ "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"z"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   } "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Static"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 6 #"error:"
0 0 19 3 1 #" "
0 0 19 3 8 #"expected"
0 0 19 3 1 #" "
0 0 19 3 4 #"Bool"
0 0 19 3 1 #" "
0 0 19 3 5 #"found"
0 0 19 3 5 #" Num\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";mismo ejemplo, pero cambiando el caso Bool del if a Num."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{ "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   } "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"   }) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";mismo ejemplo, pero cambiando el caso Num del if a Bool."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{ "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   } "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Number"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"   }) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"Bool"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";with con expresiones recursivas y operacion en condicion"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{ "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #" {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 3 #") {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   } "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
(15
 #";mismo ejemplo, pero generando un error en la definici\xC3\xB3n recur"
 #"siva"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #";de y con respecto al tipo declarado"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{ "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 2 #" {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #" {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 3 #") {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   } "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Static"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 7 #" error\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
(16
 #";usando una funci\xC3\xB3n con m\xC3\xA1s argumentos de los que le co"
 #"rresponden"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"same"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"same"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"same"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   } "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Static"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 6 #"error:"
0 0 19 3 1 #" "
0 0 19 3 5 #"arity"
0 0 19 3 1 #" "
0 0 19 3 8 #"mismatch"
0 0 19 3 1 #" "
0 0 19 3 1 #"-"
0 0 19 3 1 #" "
0 0 19 3 8 #"expected"
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #" "
0 0 19 3 9 #"arguments"
0 0 19 3 1 #" "
0 0 19 3 3 #"but"
0 0 19 3 1 #" "
0 0 19 3 8 #"received"
0 0 19 3 3 #" 3\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";with que usa una funcion numerica como expresion de un valor"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 6 #"triple"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 2 #" {"
0 0 14 3 6 #"triple"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"y"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 2 #" {"
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" {"
0 0 14 3 6 #"triple"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"}}}} }"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   } "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";with que usa una funcion booleana como expresion de un valor y"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";expresiones recursivas en la definicion de funciones"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"same"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"nand"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 4 #"}} {"
0 0 14 3 2 #"&&"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}{"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"same"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   } "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"same"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"nand"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 4 #"}} {"
0 0 14 3 2 #"&&"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}{"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"same"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"   }) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Any"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(17
 #";mismo ejemplo anterior, pero declaramos tipo de same y nand como Num"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#";lo cual es inconsistente (cuerpo es Bool, funcion es Num)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"same"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"nand"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 2 #"&&"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}{"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"same"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   } "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Static"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 6 #"error:"
0 0 19 3 1 #" "
0 0 19 3 8 #"expected"
0 0 19 3 1 #" "
0 0 19 3 4 #"Bool"
0 0 19 3 1 #" "
0 0 19 3 5 #"found"
0 0 19 3 5 #" Num\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(18
 #";mismo ejemplo anterior, pero declaramos tipo de same y nand como Any"
) 0 0 24 29 1 #"\n"
0 0 17 3 56 #";por lo cual run debe retornar y typecheck debe dar 'Any"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"same"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"nand"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #" {"
0 0 14 3 2 #"&&"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}{"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"same"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   } "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"same"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"nand"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #" {"
0 0 14 3 2 #"&&"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}{"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"same"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"   })  "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Any"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(19
 #";mismo ejemplo anterior, pero declaramos tipo de same y nand como Boo"
 #"l"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#";(consistente con el cuerpo, debe incidir retorno de typecheck)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"same"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"nand"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 2 #" {"
0 0 14 3 2 #"&&"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}{"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"same"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   } "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"same"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 2 #" {"
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"nand"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #"}} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"Bool"
0 0 24 3 2 #" {"
0 0 14 3 2 #"&&"
0 0 24 3 2 #" {"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"}{"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 4 #"with"
0 0 24 3 3 #" {{"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         {"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"same"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 4 #"nand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"   }) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"Bool"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";aplicacion anidada de funciones con multiples argumentos"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";sin with de por medio"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";typecheck debe dar 'Num aunque sum se defina como Any pues"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";los operadores binarios tienen tipo estricto"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 8 #"restsqrt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #") ("
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #")} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"sum3"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #")} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 8 #"restsqrt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sum3"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 8 #"restsqrt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #") ("
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #")} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 4 #"sum3"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 3 #")} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 14 3 8 #"restsqrt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sum3"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"Num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";funcion recursiva, definida en base a if."
0 0 24 29 1 #"\n"
0 0 17 3 58
#";run con typecheck desactivado la ejecuta sin problemas..."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 10 #"sub1until0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #")} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"sub1until0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))}}"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     {"
0 0 14 3 10 #"sub1until0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 74
(20
 #";...Pero si activamos el typecheck, el programa no tipa. Esto debido "
 #"a que"
) 0 0 24 29 1 #"\n"
0 0 17 3 82
(21
 #";en el typecheck, se revisa que el tipo del cuerpo de una funci\xC3"
 #"\xB3n coincida con el"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(22
 #";tipo declarado para esta, y como en este caso se trata de la misma f"
 #"unci\xC3\xB3n,"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
(23
 #";el comportamiento esperado es que no encuentre la definici\xC3\xB3n."
 #" "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 9 #"typecheck"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   {"
0 0 15 3 6 #"define"
0 0 24 3 2 #" {"
0 0 14 3 10 #"sub1until0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Any"
0 0 24 3 3 #")} "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"sub1until0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))}}"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     {"
0 0 14 3 10 #"sub1until0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}}) "
0 0 19 3 1 #"\""
0 0 19 3 6 #"Static"
0 0 19 3 1 #" "
0 0 19 3 6 #"error:"
0 0 19 3 1 #" "
0 0 19 3 9 #"undefined"
0 0 19 3 10 #" function\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0           0
